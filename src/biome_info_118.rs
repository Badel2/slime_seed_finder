use crate::biome_info_118::biome_tree::BiomeTree;
use crate::climate::Climate;
use crate::climate::ClimateRange;
use crate::seed_info::BiomeId;
use lazy_static::lazy_static;

lazy_static! {
    pub static ref BIOME_LIST: BiomeList = biome_data::init();
}

#[derive(Default)]
pub struct BiomeList {
    list: Vec<(ClimateRange, BiomeId)>,
    tree: Option<BiomeTree>,
}

impl BiomeList {
    pub fn add(&mut self, biome_id: BiomeId, climate_range: ClimateRange) {
        self.list.push((climate_range, biome_id));
    }

    /// Find the biome that most closely matches this climate
    pub fn search(&self, climate: &Climate) -> Option<BiomeId> {
        self.search_tree(climate)
    }

    /// Slow but hopefully always correct alternative to `search`
    pub fn search_bruteforce(&self, climate: &Climate) -> Option<BiomeId> {
        let mut min_dist = i64::MAX;
        let mut found = None;

        for (climate_range, biome_id) in &self.list {
            if let Some(new_dist) = climate_range.distance_if_lower_than(climate, min_dist) {
                min_dist = new_dist;
                found = Some(*biome_id);
            }
        }

        found
    }

    /// Slow but hopefully always correct alternative to `search`
    pub fn search_slow_bruteforce(&self, climate: &Climate) -> Option<BiomeId> {
        self.list
            .iter()
            .min_by_key(|(climate_range, _biome_id)| climate_range.distance(climate))
            .map(|(_climate_range, biome_id)| *biome_id)
    }

    /// Faster but sometimes inaccurate alternative to `search`
    pub fn search_tree(&self, climate: &Climate) -> Option<BiomeId> {
        self.tree.as_ref().unwrap().search(climate)
    }

    /// Slow but prints a list with the distance to every biome
    pub fn search_debug(&self, climate: &Climate) -> Option<BiomeId> {
        let mut distances = Vec::with_capacity(self.list.len());
        let res = self
            .list
            .iter()
            .min_by_key(|(climate_range, biome_id)| {
                let d = climate_range.distance(climate);
                distances.push((d, biome_id));

                d
            })
            .map(|(_climate_range, biome_id)| *biome_id);

        distances.sort_by_key(|(d, _biome_id)| *d);
        println!("{:?}", distances);

        res
    }

    /// Return the difference between the distance to the second closest biome and the distance to
    /// the closest biome. A low distance indicates a high probability that the biome is wrong.
    pub fn distance_to_second_biome(&self, climate: &Climate) -> Option<i64> {
        if self.list.len() <= 1 {
            return None;
        }
        let mut b = &self.list[0].1;
        let mut d0 = self.list[0].0.distance(climate);
        let mut d1 = i64::MAX;

        for (climate_range, biome_id) in self.list.iter().skip(1) {
            if biome_id == b {
                if let Some(d) = climate_range.distance_if_lower_than(climate, d0) {
                    d0 = d;
                }
            } else if let Some(d) = climate_range.distance_if_lower_than(climate, d1) {
                if d < d0 {
                    b = biome_id;
                    d1 = d0;
                    d0 = d;
                } else {
                    d1 = d;
                }
            }
        }

        Some(d1 - d0)
    }
}

/// Biome data for Minecraft 1.18.
/// I wish this was autogenerated.
mod biome_data {
    use super::*;
    use fastanvil::biome::Biome::*;
    use std::ops::RangeInclusive;

    lazy_static! {
        static ref TEMPERATURES: [RangeInclusive<i64>; 5] = [
            -10000..=-4500,
            -4500..=-1500,
            -1500..=2000,
            2000..=5500,
            5500..=10000,
        ];

        static ref HUMIDITIES: [RangeInclusive<i64>; 5] = [
            -10000..=-3500,
            -3500..=-1000,
            -1000..=1000,
            1000..=3000,
            3000..=10000,
        ];

        static ref EROSIONS: [RangeInclusive<i64>; 7] = [
            -10000..=-7800,
            -7800..=-3750,
            -3750..=-2225,
            -2225..=500,
            500..=4500,
            4500..=5500,
            5500..=10000,
        ];

        static ref CONTINENTALNESSES: [RangeInclusive<i64>; 8] = [
            -12000..=-10500,
            -10500..=-4550,
            -4550..=-1900,
            -1900..=-1100,
            -1100..=5500,
            -1100..=300,
            300..=3000,
            3000..=10000,
        ];

        static ref DEEP_OCEANS: [BiomeId; 5] = [
            BiomeId(DeepFrozenOcean as i32),
            BiomeId(DeepColdOcean as i32),
            BiomeId(DeepOcean as i32),
            BiomeId(DeepLukewarmOcean as i32),
            // TODO: this should be DeepWarmOcean but minecraft has a bug
            BiomeId(WarmOcean as i32),
        ];

        static ref OCEANS: [BiomeId; 5] = [
            BiomeId(FrozenOcean as i32),
            BiomeId(ColdOcean as i32),
            BiomeId(Ocean as i32),
            BiomeId(LukewarmOcean as i32),
            BiomeId(WarmOcean as i32),
        ];

        static ref MIDDLE_BIOMES: [[BiomeId; 5]; 5] = [
            [
                BiomeId(SnowyPlains as i32),
                BiomeId(SnowyPlains as i32),
                BiomeId(SnowyPlains as i32),
                BiomeId(SnowyTaiga as i32),
                BiomeId(Taiga as i32),
            ],
            [
                BiomeId(Plains as i32),
                BiomeId(Plains as i32),
                BiomeId(Forest as i32),
                BiomeId(Taiga as i32),
                BiomeId(OldGrowthSpruceTaiga as i32),
            ],
            [
                BiomeId(FlowerForest as i32),
                BiomeId(Plains as i32),
                BiomeId(Forest as i32),
                BiomeId(BirchForest as i32),
                BiomeId(DarkForest as i32),
            ],
            [
                BiomeId(Savanna as i32),
                BiomeId(Savanna as i32),
                BiomeId(Forest as i32),
                BiomeId(Jungle as i32),
                BiomeId(Jungle as i32),
            ],
            [
                BiomeId(Desert as i32),
                BiomeId(Desert as i32),
                BiomeId(Desert as i32),
                BiomeId(Desert as i32),
                BiomeId(Desert as i32),
            ],
        ];

        static ref MIDDLE_BIOMES_VARIANT: [[Option<BiomeId>; 5]; 5] = [
            [
                Some(BiomeId(IceSpikes as i32)),
                None,
                Some(BiomeId(SnowyTaiga as i32)),
                None,
                None,
            ],
            [
                None,
                None,
                None,
                None,
                Some(BiomeId(OldGrowthPineTaiga as i32)),
            ],
            [
                Some(BiomeId(SunflowerPlains as i32)),
                None,
                None,
                Some(BiomeId(OldGrowthBirchForest as i32)),
                None,
            ],
            [
                None,
                None,
                Some(BiomeId(Plains as i32)),
                Some(BiomeId(SparseJungle as i32)),
                Some(BiomeId(BambooJungle as i32)),
            ],
            [
                None,
                None,
                None,
                None,
                None,
            ],
        ];



        static ref PLATEAU_BIOMES: [[BiomeId; 5]; 5] = [
            [
                BiomeId(SnowyPlains as i32),
                BiomeId(SnowyPlains as i32),
                BiomeId(SnowyPlains as i32),
                BiomeId(SnowyTaiga as i32),
                BiomeId(SnowyTaiga as i32),
            ],
            [
                BiomeId(Meadow as i32),
                BiomeId(Meadow as i32),
                BiomeId(Forest as i32),
                BiomeId(Taiga as i32),
                BiomeId(OldGrowthSpruceTaiga as i32),
            ],
            [
                BiomeId(Meadow as i32),
                BiomeId(Meadow as i32),
                BiomeId(Meadow as i32),
                BiomeId(Meadow as i32),
                BiomeId(DarkForest as i32),
            ],
            [
                BiomeId(SavannaPlateau as i32),
                BiomeId(SavannaPlateau as i32),
                BiomeId(Forest as i32),
                BiomeId(Forest as i32),
                BiomeId(Jungle as i32),
            ],
            [
                BiomeId(Badlands as i32),
                BiomeId(Badlands as i32),
                BiomeId(Badlands as i32),
                BiomeId(WoodedBadlands as i32),
                BiomeId(WoodedBadlands as i32),
            ],
        ];

        static ref PLATEAU_BIOMES_VARIANT: [[Option<BiomeId>; 5]; 5] = [
            [
                Some(BiomeId(IceSpikes as i32)),
                None,
                None,
                None,
                None,
            ],
            [
                None,
                None,
                Some(BiomeId(Meadow as i32)),
                Some(BiomeId(Meadow as i32)),
                Some(BiomeId(OldGrowthPineTaiga as i32)),
            ],
            [
                None,
                None,
                Some(BiomeId(Forest as i32)),
                Some(BiomeId(BirchForest as i32)),
                None,
            ],
            [
                None,
                None,
                None,
                None,
                None,
            ],
            [
                Some(BiomeId(ErodedBadlands as i32)),
                Some(BiomeId(ErodedBadlands as i32)),
                None,
                None,
                None,
            ],
        ];

        static ref EXTREME_HILLS: [[Option<BiomeId>; 5]; 5] = [
            [
                Some(BiomeId(WindsweptGravellyHills as i32)),
                Some(BiomeId(WindsweptGravellyHills as i32)),
                Some(BiomeId(WindsweptHills as i32)),
                Some(BiomeId(WindsweptForest as i32)),
                Some(BiomeId(WindsweptForest as i32)),
            ],
            [
                Some(BiomeId(WindsweptGravellyHills as i32)),
                Some(BiomeId(WindsweptGravellyHills as i32)),
                Some(BiomeId(WindsweptHills as i32)),
                Some(BiomeId(WindsweptForest as i32)),
                Some(BiomeId(WindsweptForest as i32)),
            ],
            [
                Some(BiomeId(WindsweptHills as i32)),
                Some(BiomeId(WindsweptHills as i32)),
                Some(BiomeId(WindsweptHills as i32)),
                Some(BiomeId(WindsweptForest as i32)),
                Some(BiomeId(WindsweptForest as i32)),
            ],
            [
                None,
                None,
                None,
                None,
                None,
            ],
            [
                None,
                None,
                None,
                None,
                None,
            ],
        ];
    }

    #[repr(C)]
    enum ContinentalnessIndex {
        MushroomFields,
        DeepOcean,
        Ocean,
        Coast,
        Inland,
        NearInland,
        MidInland,
        FarInland,
    }

    /// Raw biome data for 1.18
    pub fn init() -> BiomeList {
        let mut v = BiomeList::default();

        add_off_coast_biomes(&mut v);
        add_inland_biomes(&mut v);
        add_underground_biomes(&mut v);

        v.tree = Some(BiomeTree::new(v.list.clone()));

        //panic!("Look at this nice tree: {:?}", v.tree.as_ref().unwrap());

        v
    }

    pub fn add_off_coast_biomes(v: &mut BiomeList) {
        add_surface_biome(
            v,
            -10000..=10000,
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::MushroomFields as usize].clone(),
            -10000..=10000,
            -10000..=10000,
            0.0,
            BiomeId(MushroomFields as i32),
        );

        assert_eq!(TEMPERATURES.len(), DEEP_OCEANS.len());
        assert_eq!(TEMPERATURES.len(), OCEANS.len());
        for i in 0..TEMPERATURES.len() {
            let temperature = TEMPERATURES[i].clone();
            let deep_ocean_id = DEEP_OCEANS[i];
            let ocean_id = OCEANS[i];

            add_surface_biome(
                v,
                temperature.clone(),
                -10000..=10000,
                CONTINENTALNESSES[ContinentalnessIndex::DeepOcean as usize].clone(),
                -10000..=10000,
                -10000..=10000,
                0.0,
                deep_ocean_id,
            );
            add_surface_biome(
                v,
                temperature.clone(),
                -10000..=10000,
                CONTINENTALNESSES[ContinentalnessIndex::Ocean as usize].clone(),
                -10000..=10000,
                -10000..=10000,
                0.0,
                ocean_id,
            );
        }
    }

    pub fn add_inland_biomes(v: &mut BiomeList) {
        add_mid_slice(v, -10000..=-9333);
        add_high_slice(v, -9333..=-7667);
        add_peaks(v, -7667..=-5667);
        add_high_slice(v, -5667..=-4000);
        add_mid_slice(v, -4000..=-2667);
        add_low_slice(v, -2667..=-500);
        add_valleys(v, -500..=500);
        add_low_slice(v, 500..=2667);
        add_mid_slice(v, 2667..=4000);
        add_high_slice(v, 4000..=5667);
        add_peaks(v, 5667..=7667);
        add_high_slice(v, 7667..=9333);
        add_mid_slice(v, 9333..=10000);
    }

    pub fn add_peaks(v: &mut BiomeList, weirdness: RangeInclusive<i64>) {
        for i in 0..TEMPERATURES.len() {
            let temperature = &TEMPERATURES[i];

            for j in 0..HUMIDITIES.len() {
                let humidity = &HUMIDITIES[j];

                let b0 = pick_middle_biome(i, j, weirdness.clone());
                let b1 = pick_middle_biome_or_badlands_if_hot(i, j, weirdness.clone());
                let b2 =
                    pick_middle_biome_or_badlands_if_hot_or_slope_if_cold(i, j, weirdness.clone());
                let b3 = pick_plateau_biome(i, j, weirdness.clone());
                let b4 = pick_extreme_hills_biome(i, j, weirdness.clone());
                let b5 = maybe_pick_shattered_biome(i, j, weirdness.clone()).unwrap_or(b4);
                let b6 = pick_peak_biome(i, j, weirdness.clone());

                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[0].clone(),
                    weirdness.clone(),
                    0.0,
                    b6,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    ),
                    EROSIONS[1].clone(),
                    weirdness.clone(),
                    0.0,
                    b2,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[1].clone(),
                    weirdness.clone(),
                    0.0,
                    b6,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    ),
                    merge_ranges(EROSIONS[2].clone(), EROSIONS[3].clone()),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[2].clone(),
                    weirdness.clone(),
                    0.0,
                    b3,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                    EROSIONS[3].clone(),
                    weirdness.clone(),
                    0.0,
                    b1,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    EROSIONS[3].clone(),
                    weirdness.clone(),
                    0.0,
                    b3,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[4].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    ),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b5,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b4,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[6].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
            }
        }
    }

    pub fn add_high_slice(v: &mut BiomeList, weirdness: RangeInclusive<i64>) {
        for i in 0..TEMPERATURES.len() {
            let temperature = &TEMPERATURES[i];

            for j in 0..HUMIDITIES.len() {
                let humidity = &HUMIDITIES[j];

                let b0 = pick_middle_biome(i, j, weirdness.clone());
                let b1 = pick_middle_biome_or_badlands_if_hot(i, j, weirdness.clone());
                let b2 =
                    pick_middle_biome_or_badlands_if_hot_or_slope_if_cold(i, j, weirdness.clone());
                let b3 = pick_plateau_biome(i, j, weirdness.clone());
                let b4 = pick_extreme_hills_biome(i, j, weirdness.clone());
                let b5 = maybe_pick_shattered_biome(i, j, weirdness.clone()).unwrap_or(b0);
                let b6 = pick_slope_biome(i, j, weirdness.clone());
                let b7 = pick_peak_biome(i, j, weirdness.clone());

                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                    merge_ranges(EROSIONS[0].clone(), EROSIONS[1].clone()),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    EROSIONS[0].clone(),
                    weirdness.clone(),
                    0.0,
                    b6,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[0].clone(),
                    weirdness.clone(),
                    0.0,
                    b7,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    EROSIONS[1].clone(),
                    weirdness.clone(),
                    0.0,
                    b2,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[1].clone(),
                    weirdness.clone(),
                    0.0,
                    b6,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    ),
                    merge_ranges(EROSIONS[2].clone(), EROSIONS[3].clone()),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[2].clone(),
                    weirdness.clone(),
                    0.0,
                    b3,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                    EROSIONS[3].clone(),
                    weirdness.clone(),
                    0.0,
                    b1,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    EROSIONS[3].clone(),
                    weirdness.clone(),
                    0.0,
                    b3,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[4].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    ),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b5,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b4,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[6].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
            }
        }
    }

    pub fn add_mid_slice(v: &mut BiomeList, weirdness: RangeInclusive<i64>) {
        add_surface_biome(
            v,
            -10000..=10000,
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
            merge_ranges(EROSIONS[0].clone(), EROSIONS[2].clone()),
            weirdness.clone(),
            0.0,
            BiomeId(StonyShore as i32),
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            merge_ranges(
                CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
            ),
            EROSIONS[6].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(Swamp as i32),
        );

        for i in 0..TEMPERATURES.len() {
            let temperature = &TEMPERATURES[i];

            for j in 0..HUMIDITIES.len() {
                let humidity = &HUMIDITIES[j];

                let b0 = pick_middle_biome(i, j, weirdness.clone());
                let b1 = pick_middle_biome_or_badlands_if_hot(i, j, weirdness.clone());
                let b2 =
                    pick_middle_biome_or_badlands_if_hot_or_slope_if_cold(i, j, weirdness.clone());
                let b3 = pick_extreme_hills_biome(i, j, weirdness.clone());
                let b4 = pick_plateau_biome(i, j, weirdness.clone());
                let b5 = pick_beach_biome(i, j);
                let b6 = maybe_pick_shattered_biome(i, j, weirdness.clone()).unwrap_or(b0);
                let b7 = pick_shattered_coast_biome(i, j, weirdness.clone());
                let b8 = pick_slope_biome(i, j, weirdness.clone());

                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[0].clone(),
                    weirdness.clone(),
                    0.0,
                    b8,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                    ),
                    EROSIONS[1].clone(),
                    weirdness.clone(),
                    0.0,
                    b2,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    EROSIONS[1].clone(),
                    weirdness.clone(),
                    0.0,
                    if i == 0 { b8 } else { b4 },
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    EROSIONS[2].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                    EROSIONS[2].clone(),
                    weirdness.clone(),
                    0.0,
                    b1,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    EROSIONS[2].clone(),
                    weirdness.clone(),
                    0.0,
                    b4,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    ),
                    EROSIONS[3].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[3].clone(),
                    weirdness.clone(),
                    0.0,
                    b1,
                );

                if *weirdness.end() < 0 {
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        EROSIONS[4].clone(),
                        weirdness.clone(),
                        0.0,
                        b5,
                    );
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        merge_ranges(
                            CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                            CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                        ),
                        EROSIONS[4].clone(),
                        weirdness.clone(),
                        0.0,
                        b0,
                    );
                } else {
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        merge_ranges(
                            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                            CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                        ),
                        EROSIONS[4].clone(),
                        weirdness.clone(),
                        0.0,
                        b0,
                    );
                }

                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b7,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b6,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b3,
                );

                if *weirdness.end() < 0 {
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        EROSIONS[6].clone(),
                        weirdness.clone(),
                        0.0,
                        b5,
                    );
                } else {
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                        EROSIONS[6].clone(),
                        weirdness.clone(),
                        0.0,
                        b0,
                    );
                }

                if i == 0 {
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        merge_ranges(
                            CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                            CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                        ),
                        EROSIONS[6].clone(),
                        weirdness.clone(),
                        0.0,
                        b0,
                    );
                }
            }
        }
    }

    pub fn add_low_slice(v: &mut BiomeList, weirdness: RangeInclusive<i64>) {
        add_surface_biome(
            v,
            -10000..=10000,
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
            merge_ranges(EROSIONS[0].clone(), EROSIONS[2].clone()),
            weirdness.clone(),
            0.0,
            BiomeId(StonyShore as i32),
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            merge_ranges(
                CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
            ),
            EROSIONS[6].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(Swamp as i32),
        );

        for i in 0..TEMPERATURES.len() {
            let temperature = &TEMPERATURES[i];

            for j in 0..HUMIDITIES.len() {
                let humidity = &HUMIDITIES[j];

                let b0 = pick_middle_biome(i, j, weirdness.clone());
                let b1 = pick_middle_biome_or_badlands_if_hot(i, j, weirdness.clone());
                let b2 =
                    pick_middle_biome_or_badlands_if_hot_or_slope_if_cold(i, j, weirdness.clone());
                let b3 = pick_beach_biome(i, j);
                let b4 = maybe_pick_shattered_biome(i, j, weirdness.clone()).unwrap_or(b0);
                let b5 = pick_shattered_coast_biome(i, j, weirdness.clone());

                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    merge_ranges(EROSIONS[0].clone(), EROSIONS[1].clone()),
                    weirdness.clone(),
                    0.0,
                    b1,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    merge_ranges(EROSIONS[0].clone(), EROSIONS[1].clone()),
                    weirdness.clone(),
                    0.0,
                    b2,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    merge_ranges(EROSIONS[2].clone(), EROSIONS[3].clone()),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    merge_ranges(EROSIONS[2].clone(), EROSIONS[3].clone()),
                    weirdness.clone(),
                    0.0,
                    b1,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                    merge_ranges(EROSIONS[3].clone(), EROSIONS[4].clone()),
                    weirdness.clone(),
                    0.0,
                    b3,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[4].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b5,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b4,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    EROSIONS[5].clone(),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                    EROSIONS[6].clone(),
                    weirdness.clone(),
                    0.0,
                    b3,
                );

                if i == 0 {
                    add_surface_biome(
                        v,
                        temperature.clone(),
                        humidity.clone(),
                        merge_ranges(
                            CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
                            CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                        ),
                        EROSIONS[6].clone(),
                        weirdness.clone(),
                        0.0,
                        b0,
                    );
                }
            }
        }
    }

    pub fn add_valleys(v: &mut BiomeList, weirdness: RangeInclusive<i64>) {
        add_surface_biome(
            v,
            TEMPERATURES[0].clone(),
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
            merge_ranges(EROSIONS[0].clone(), EROSIONS[1].clone()),
            weirdness.clone(),
            0.0,
            if *weirdness.end() < 0 {
                BiomeId(StonyShore as i32)
            } else {
                BiomeId(FrozenRiver as i32)
            },
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
            EROSIONS[1].clone(),
            weirdness.clone(),
            0.0,
            if *weirdness.end() < 0 {
                BiomeId(StonyShore as i32)
            } else {
                BiomeId(River as i32)
            },
        );
        add_surface_biome(
            v,
            TEMPERATURES[0].clone(),
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
            merge_ranges(EROSIONS[0].clone(), EROSIONS[1].clone()),
            weirdness.clone(),
            0.0,
            BiomeId(FrozenRiver as i32),
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::NearInland as usize].clone(),
            EROSIONS[1].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(River as i32),
        );
        add_surface_biome(
            v,
            TEMPERATURES[0].clone(),
            -10000..=10000,
            merge_ranges(
                CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
            ),
            merge_ranges(EROSIONS[2].clone(), EROSIONS[5].clone()),
            weirdness.clone(),
            0.0,
            BiomeId(FrozenRiver as i32),
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            merge_ranges(
                CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
                CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
            ),
            merge_ranges(EROSIONS[2].clone(), EROSIONS[5].clone()),
            weirdness.clone(),
            0.0,
            BiomeId(River as i32),
        );
        add_surface_biome(
            v,
            TEMPERATURES[0].clone(),
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
            EROSIONS[6].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(FrozenRiver as i32),
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            CONTINENTALNESSES[ContinentalnessIndex::Coast as usize].clone(),
            EROSIONS[6].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(River as i32),
        );
        add_surface_biome(
            v,
            merge_ranges(TEMPERATURES[1].clone(), TEMPERATURES[4].clone()),
            -10000..=10000,
            merge_ranges(
                CONTINENTALNESSES[ContinentalnessIndex::Inland as usize].clone(),
                CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
            ),
            EROSIONS[6].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(Swamp as i32),
        );
        add_surface_biome(
            v,
            TEMPERATURES[0].clone(),
            -10000..=10000,
            merge_ranges(
                CONTINENTALNESSES[ContinentalnessIndex::Inland as usize].clone(),
                CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
            ),
            EROSIONS[6].clone(),
            weirdness.clone(),
            0.0,
            BiomeId(FrozenRiver as i32),
        );

        for i in 0..TEMPERATURES.len() {
            let temperature = &TEMPERATURES[i];

            for j in 0..HUMIDITIES.len() {
                let humidity = &HUMIDITIES[j];

                let b0 = pick_middle_biome_or_badlands_if_hot(i, j, weirdness.clone());

                add_surface_biome(
                    v,
                    temperature.clone(),
                    humidity.clone(),
                    merge_ranges(
                        CONTINENTALNESSES[ContinentalnessIndex::MidInland as usize].clone(),
                        CONTINENTALNESSES[ContinentalnessIndex::FarInland as usize].clone(),
                    ),
                    merge_ranges(EROSIONS[0].clone(), EROSIONS[1].clone()),
                    weirdness.clone(),
                    0.0,
                    b0,
                );
            }
        }
    }

    pub fn add_underground_biomes(v: &mut BiomeList) {
        let dripstone_caves = BiomeId(fastanvil::biome::Biome::DripstoneCaves as i32);
        let lush_caves = BiomeId(fastanvil::biome::Biome::LushCaves as i32);
        add_underground_biome(
            v,
            -10000..=10000,
            -10000..=10000,
            8000..=10000,
            -10000..=10000,
            -10000..=10000,
            0.0,
            dripstone_caves,
        );
        add_underground_biome(
            v,
            -10000..=10000,
            7000..=10000,
            -10000..=10000,
            -10000..=10000,
            -10000..=10000,
            0.0,
            lush_caves,
        );
    }

    pub fn pick_middle_biome(i: usize, j: usize, weirdness: RangeInclusive<i64>) -> BiomeId {
        if *weirdness.end() < 0 {
            MIDDLE_BIOMES[i][j]
        } else {
            MIDDLE_BIOMES_VARIANT[i][j].unwrap_or_else(|| MIDDLE_BIOMES[i][j])
        }
    }

    pub fn pick_middle_biome_or_badlands_if_hot(
        i: usize,
        j: usize,
        weirdness: RangeInclusive<i64>,
    ) -> BiomeId {
        if i == 4 {
            pick_badlands_biome(j, weirdness)
        } else {
            pick_middle_biome(i, j, weirdness)
        }
    }

    pub fn pick_middle_biome_or_badlands_if_hot_or_slope_if_cold(
        i: usize,
        j: usize,
        weirdness: RangeInclusive<i64>,
    ) -> BiomeId {
        if i == 0 {
            pick_slope_biome(i, j, weirdness)
        } else {
            pick_middle_biome_or_badlands_if_hot(i, j, weirdness)
        }
    }

    pub fn maybe_pick_shattered_biome(
        i: usize,
        j: usize,
        weirdness: RangeInclusive<i64>,
    ) -> Option<BiomeId> {
        if i > 1 && j < 4 && *weirdness.end() >= 0 {
            Some(BiomeId(WindsweptSavanna as i32))
        } else {
            None
        }
    }

    pub fn pick_shattered_coast_biome(
        i: usize,
        j: usize,
        weirdness: RangeInclusive<i64>,
    ) -> BiomeId {
        maybe_pick_shattered_biome(i, j, weirdness.clone()).unwrap_or_else(|| {
            if *weirdness.end() >= 0 {
                pick_middle_biome(i, j, weirdness)
            } else {
                pick_beach_biome(i, j)
            }
        })
    }

    pub fn pick_beach_biome(i: usize, _j: usize) -> BiomeId {
        match i {
            0 => BiomeId(SnowyBeach as i32),
            4 => BiomeId(Desert as i32),
            _ => BiomeId(Beach as i32),
        }
    }

    pub fn pick_badlands_biome(i: usize, weirdness: RangeInclusive<i64>) -> BiomeId {
        if i < 2 {
            if *weirdness.end() < 0 {
                BiomeId(ErodedBadlands as i32)
            } else {
                BiomeId(Badlands as i32)
            }
        } else if i < 3 {
            BiomeId(Badlands as i32)
        } else {
            BiomeId(WoodedBadlands as i32)
        }
    }

    pub fn pick_plateau_biome(i: usize, j: usize, weirdness: RangeInclusive<i64>) -> BiomeId {
        if *weirdness.end() < 0 {
            PLATEAU_BIOMES[i][j]
        } else {
            PLATEAU_BIOMES_VARIANT[i][j].unwrap_or_else(|| PLATEAU_BIOMES[i][j])
        }
    }

    pub fn pick_peak_biome(i: usize, j: usize, weirdness: RangeInclusive<i64>) -> BiomeId {
        if i <= 2 {
            if *weirdness.end() < 0 {
                BiomeId(JaggedPeaks as i32)
            } else {
                BiomeId(FrozenPeaks as i32)
            }
        } else if i == 3 {
            BiomeId(StonyPeaks as i32)
        } else {
            pick_badlands_biome(j, weirdness)
        }
    }

    pub fn pick_slope_biome(i: usize, j: usize, weirdness: RangeInclusive<i64>) -> BiomeId {
        if i >= 3 {
            pick_plateau_biome(i, j, weirdness)
        } else if j <= 1 {
            BiomeId(SnowySlopes as i32)
        } else {
            BiomeId(Grove as i32)
        }
    }

    pub fn pick_extreme_hills_biome(i: usize, j: usize, weirdness: RangeInclusive<i64>) -> BiomeId {
        EXTREME_HILLS[i][j].unwrap_or_else(|| pick_middle_biome(i, j, weirdness))
    }

    pub fn add_surface_biome(
        v: &mut BiomeList,
        temperature: RangeInclusive<i64>,
        humidity: RangeInclusive<i64>,
        continentalness: RangeInclusive<i64>,
        erosion: RangeInclusive<i64>,
        weirdness: RangeInclusive<i64>,
        _f: f32,
        biome_id: BiomeId,
    ) {
        for depth in [0, 10000] {
            let depth = depth..=depth; // yes, this is valid syntax, trust me
            v.add(
                biome_id,
                ClimateRange {
                    temperature: temperature.clone(),
                    humidity: humidity.clone(),
                    continentalness: continentalness.clone(),
                    erosion: erosion.clone(),
                    depth,
                    weirdness: weirdness.clone(),
                },
            );
        }
    }

    pub fn add_underground_biome(
        v: &mut BiomeList,
        temperature: RangeInclusive<i64>,
        humidity: RangeInclusive<i64>,
        continentalness: RangeInclusive<i64>,
        erosion: RangeInclusive<i64>,
        weirdness: RangeInclusive<i64>,
        _f: f32,
        biome_id: BiomeId,
    ) {
        let depth = 2000..=9000;
        v.add(
            biome_id,
            ClimateRange {
                temperature,
                humidity,
                continentalness,
                erosion,
                depth,
                weirdness,
            },
        );
    }

    pub fn merge_ranges(a: RangeInclusive<i64>, b: RangeInclusive<i64>) -> RangeInclusive<i64> {
        *a.start()..=*b.end()
    }
}

// Biome tree
mod biome_tree {
    use super::*;
    use std::cmp::max;
    use std::cmp::min;
    use std::cmp::Ordering;
    use std::ops::RangeInclusive;

    pub fn merge_ranges(a: &RangeInclusive<i64>, b: &RangeInclusive<i64>) -> RangeInclusive<i64> {
        min(*a.start(), *b.start())..=max(*a.end(), *b.end())
    }

    pub fn merge_climates(a: &ClimateRange, b: &ClimateRange) -> ClimateRange {
        ClimateRange {
            temperature: merge_ranges(&a.temperature, &b.temperature),
            humidity: merge_ranges(&a.humidity, &b.humidity),
            continentalness: merge_ranges(&a.continentalness, &b.continentalness),
            erosion: merge_ranges(&a.erosion, &b.erosion),
            depth: merge_ranges(&a.depth, &b.depth),
            weirdness: merge_ranges(&a.weirdness, &b.weirdness),
        }
    }

    fn merge_range_list(list: &[(ClimateRange, BiomeId)]) -> ClimateRange {
        let (mut r, _) = list[0].clone();

        for (s, _) in list {
            r = merge_climates(&r, s);
        }

        r
    }

    fn merge_range_list_node(list: &[Node]) -> ClimateRange {
        let mut r = list[0].range.clone();

        for node in list {
            let s = &node.range;
            r = merge_climates(&r, s);
        }

        r
    }

    #[derive(Debug)]
    struct Node {
        range: ClimateRange,
        value: Option<BiomeId>,
        children: Vec<Node>,
    }

    impl Node {
        fn new(list: Vec<(ClimateRange, BiomeId)>) -> Self {
            let range = merge_range_list(&list);
            let children = list
                .into_iter()
                .map(|(range, value)| Self::leaf(range, value))
                .collect();

            Self {
                range,
                value: None,
                children,
            }
        }
        fn leaf(range: ClimateRange, value: BiomeId) -> Self {
            Self {
                range,
                value: Some(value),
                children: vec![],
            }
        }
        fn search(&self, k: &Climate, mut ds: i64) -> Option<&Node> {
            if let Some(_v) = &self.value {
                return Some(self);
            }

            let mut leaf = None;

            for ch in &self.children {
                let ds_inner = ch.range.distance(k);

                if ds_inner < ds {
                    let leaf2 = ch.search(k, ds);
                    let ds_leaf2 = if let Some(leaf2) = leaf2 {
                        leaf2.range.distance(k)
                    } else {
                        ds_inner
                    };
                    if let Some(leaf2) = leaf2 {
                        if ds_leaf2 < ds {
                            ds = ds_leaf2;
                            leaf = Some(leaf2);
                        }
                    }
                }
            }

            leaf
        }
    }

    #[derive(Debug)]
    pub struct BiomeTree {
        root: Node,
    }

    impl BiomeTree {
        pub fn new(list: Vec<(ClimateRange, BiomeId)>) -> Self {
            let root = Self::build(list);
            Self { root }
        }

        fn build(mut list: Vec<(ClimateRange, BiomeId)>) -> Node {
            if list.len() == 1 {
                let (range, value) = list.into_iter().next().unwrap();

                Node::leaf(range, value)
            } else if list.len() <= 10 {
                list.sort_by_key(|(range, _value)| {
                    let distance_to_origin =
                        |r: &RangeInclusive<i64>| ((r.start() + r.end()) / 2).abs();
                    let r = distance_to_origin;

                    r(&range.temperature)
                        + r(&range.humidity)
                        + r(&range.continentalness)
                        + r(&range.erosion)
                        + r(&range.depth)
                        + r(&range.weirdness)
                });

                Node::new(list)
            } else {
                let mut j = i64::MAX;
                let mut k = 0;
                let mut list1 = vec![];

                for l in 0..6 {
                    sort(&mut list, l, false);
                    let list2 = bucketize(&list);
                    let mut i1 = 0;

                    for ec in &list2 {
                        i1 += cost(&ec.children, l);
                    }

                    if j > i1 {
                        j = i1;
                        k = l;
                        list1 = list2;
                    }
                }

                sort_nodes(&mut list1, k, true);
                let range = merge_range_list_node(&list1);

                Node {
                    range,
                    value: None,
                    children: list1
                        .into_iter()
                        .map(|l| {
                            Self::build(
                                l.children
                                    .into_iter()
                                    .map(|c| {
                                        assert_eq!(c.children.len(), 0);
                                        (c.range, c.value.unwrap())
                                    })
                                    .collect(),
                            )
                        })
                        .collect(),
                }
            }
        }

        pub fn search(&self, k: &Climate) -> Option<BiomeId> {
            let ds = i64::MAX;
            self.root.search(k, ds).map(|node| node.value.unwrap())
        }
    }

    fn cost(list: &[Node], l: usize) -> i64 {
        let mut i = 0;

        let range_size = |r: &RangeInclusive<i64>| (r.end() - r.start()).abs();

        for node in list {
            let r = &node.range;
            let value = match l {
                0 => &r.temperature,
                1 => &r.humidity,
                2 => &r.continentalness,
                3 => &r.erosion,
                4 => &r.depth,
                5 => &r.weirdness,
                _ => panic!("Invalid parameter: {}", i),
            };
            i += range_size(value);
        }

        i
    }

    fn sort(list: &mut [(ClimateRange, BiomeId)], j: usize, absolute_value: bool) {
        list.sort_by(|(ka, _), (kb, _)| {
            comparator(j % 6, absolute_value)(ka, kb)
                .then_with(|| comparator((j + 1) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 2) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 3) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 4) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 5) % 6, absolute_value)(ka, kb))
        });
    }

    fn sort_nodes(list: &mut [Node], j: usize, absolute_value: bool) {
        list.sort_by(|a, b| {
            let ka = &a.range;
            let kb = &b.range;
            comparator(j % 6, absolute_value)(ka, kb)
                .then_with(|| comparator((j + 1) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 2) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 3) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 4) % 6, absolute_value)(ka, kb))
                .then_with(|| comparator((j + 5) % 6, absolute_value)(ka, kb))
        });
    }

    fn comparator(
        i: usize,
        absolute_value: bool,
    ) -> impl FnMut(&ClimateRange, &ClimateRange) -> Ordering {
        let mut k = comparator_by_key(i, absolute_value);

        move |a, b| k(a).cmp(&k(b))
    }

    fn comparator_by_key(i: usize, absolute_value: bool) -> impl FnMut(&ClimateRange) -> i64 {
        move |range| {
            let value = match i {
                0 => &range.temperature,
                1 => &range.humidity,
                2 => &range.continentalness,
                3 => &range.erosion,
                4 => &range.depth,
                5 => &range.weirdness,
                _ => panic!("Invalid parameter: {}", i),
            };
            let distance_to_origin = |r: &RangeInclusive<i64>| ((r.start() + r.end()) / 2).abs();
            let j = distance_to_origin(value);

            if absolute_value {
                j.abs()
            } else {
                j
            }
        }
    }

    fn bucketize(list: &[(ClimateRange, BiomeId)]) -> Vec<Node> {
        let max_size = 10.0_f64.powf(((list.len() as f64 - 0.01).log(10.0)).floor()) as usize;

        list.chunks(max_size)
            .map(|sublist| Node::new(sublist.to_vec()))
            .collect()
    }
}
